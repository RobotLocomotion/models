# SPDX-License-Identifier: BSD-3-Clause

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@rules_python//python:defs.bzl", "py_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load(":defs.bzl", "xacro_file")

_XACROS = {
    "realsense2_description/urdf/d415.urdf": {
        "src": "realsense2_description/urdf/customized/test_d415_camera.urdf.xacro",
        "data": [
            "realsense2_description/urdf/customized/_d415.urdf.xacro",
            "realsense2_description/urdf/customized/_materials.urdf.xacro",
            "realsense2_description/urdf/customized/_usb_plug.urdf.xacro",
        ],
    },
    "tri_homecart/homecart_bimanual.urdf": {
        "src": "tri_homecart/homecart_bimanual.urdf.xacro",
        "data": [],
    },
    "tri_homecart/homecart_cutting_board.sdf": {
        "src": "tri_homecart/homecart_cutting_board.sdf.xacro",
        "data": [],
    },
    "ur_description/urdf/ur3e_cylinders_collision.urdf": {
        "src": "ur_description/urdf/ur3e_cylinders_collision.urdf.xacro",
        "data": [
            "ur_description/urdf/ur.transmission.xacro",
            "ur_description/urdf/ur3e.urdf.xacro",
        ],
    },
    "ur_description/urdf/ur3e_spheres_collision.urdf": {
        "src": "ur_description/urdf/ur3e_spheres_collision.urdf.xacro",
        "data": [
            "ur_description/urdf/ur.transmission.xacro",
            "ur_description/urdf/ur3e.urdf.xacro",
        ],
    },
}

# Generate the xacro output into a temp dir.
[
    xacro_file(
        name = "gen/" + name,
        src = attrs["src"],
        data = attrs["data"],
    )
    for name, attrs in _XACROS.items()
]

# Cross-check that the committed files are up to date.
[
    diff_test(
        name = name + ".diff_test",
        failure_message = "To fix, run this command:\n  cp {} {}".format(
            ".bazel/bin/gen/" + name,
            name,
        ),
        file1 = ":gen/" + name,
        file2 = name,
    )
    for name in _XACROS
]

# Patch the realsense files to suit this repository.
[
    genrule(
        name = "_gen_{}".format(filename),
        srcs = [
            "realsense2_description/urdf/customize.sed",
            "realsense2_description/urdf/{}".format(filename),
        ],
        outs = [
            "realsense2_description/urdf/customized/{}".format(filename),
        ],
        cmd = "sed --file={} {} > $@".format(
            "$(execpath realsense2_description/urdf/customize.sed)",
            "$(execpath realsense2_description/urdf/{})".format(filename),
        ),
    )
    for filename in [
        "test_d415_camera.urdf.xacro",
        "_d415.urdf.xacro",
        "_materials.urdf.xacro",
        "_usb_plug.urdf.xacro",
    ]
]

_ALL = glob([
    "**/*",
], exclude = [
    ".*/**/*",
])

write_file(
    name = "_inventory",
    out = "inventory.txt",
    content = _ALL,
)

py_test(
    name = "parse_test",
    srcs = [".private/parse_test.py"],
    data = _ALL + [
        ":inventory.txt",
    ],
    deps = [
        "@pip//drake:pkg",
    ],
)

# Tool to update the requirements file.
compile_pip_requirements(
    name = "requirements",
    src = ".private/requirements.in",
    requirements_txt = ".private/requirements_lock.txt",
    tags = ["manual"],
)
